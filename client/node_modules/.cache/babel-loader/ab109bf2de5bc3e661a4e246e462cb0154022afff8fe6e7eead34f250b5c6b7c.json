{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTargetClosedError = exports.Connection = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst CallbackRegistry_js_1 = require(\"../common/CallbackRegistry.js\");\nconst Debug_js_1 = require(\"../common/Debug.js\");\nconst Errors_js_1 = require(\"../common/Errors.js\");\nconst EventEmitter_js_1 = require(\"../common/EventEmitter.js\");\nconst ErrorLike_js_1 = require(\"../util/ErrorLike.js\");\nconst CDPSession_js_2 = require(\"./CDPSession.js\");\nconst debugProtocolSend = (0, Debug_js_1.debug)('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = (0, Debug_js_1.debug)('puppeteer:protocol:RECV ◀');\n/**\n * @public\n */\nclass Connection extends EventEmitter_js_1.EventEmitter {\n  #url;\n  #transport;\n  #delay;\n  #timeout;\n  #sessions = new Map();\n  #closed = false;\n  #manuallyAttached = new Set();\n  #callbacks = new CallbackRegistry_js_1.CallbackRegistry();\n  constructor(url, transport, delay = 0, timeout) {\n    super();\n    this.#url = url;\n    this.#delay = delay;\n    this.#timeout = timeout ?? 180000;\n    this.#transport = transport;\n    this.#transport.onmessage = this.onMessage.bind(this);\n    this.#transport.onclose = this.#onClose.bind(this);\n  }\n  static fromSession(session) {\n    return session.connection();\n  }\n  get timeout() {\n    return this.#timeout;\n  }\n  /**\n   * @internal\n   */\n  get _closed() {\n    return this.#closed;\n  }\n  /**\n   * @internal\n   */\n  get _sessions() {\n    return this.#sessions;\n  }\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n  session(sessionId) {\n    return this.#sessions.get(sessionId) || null;\n  }\n  url() {\n    return this.#url;\n  }\n  send(method, params, options) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    return this._rawSend(this.#callbacks, method, params, undefined, options);\n  }\n  /**\n   * @internal\n   */\n  _rawSend(callbacks, method, params, sessionId, options) {\n    return callbacks.create(method, options?.timeout ?? this.#timeout, id => {\n      const stringifiedMessage = JSON.stringify({\n        method,\n        params,\n        id,\n        sessionId\n      });\n      debugProtocolSend(stringifiedMessage);\n      this.#transport.send(stringifiedMessage);\n    });\n  }\n  /**\n   * @internal\n   */\n  async closeBrowser() {\n    await this.send('Browser.close');\n  }\n  /**\n   * @internal\n   */\n  async onMessage(message) {\n    if (this.#delay) {\n      await new Promise(r => {\n        return setTimeout(r, this.#delay);\n      });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CDPSession_js_2.CdpCDPSession(this, object.params.targetInfo.type, sessionId, object.sessionId);\n      this.#sessions.set(sessionId, session);\n      this.emit(CDPSession_js_1.CDPSessionEvent.SessionAttached, session);\n      const parentSession = this.#sessions.get(object.sessionId);\n      if (parentSession) {\n        parentSession.emit(CDPSession_js_1.CDPSessionEvent.SessionAttached, session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this.#sessions.get(object.params.sessionId);\n      if (session) {\n        session._onClosed();\n        this.#sessions.delete(object.params.sessionId);\n        this.emit(CDPSession_js_1.CDPSessionEvent.SessionDetached, session);\n        const parentSession = this.#sessions.get(object.sessionId);\n        if (parentSession) {\n          parentSession.emit(CDPSession_js_1.CDPSessionEvent.SessionDetached, session);\n        }\n      }\n    }\n    if (object.sessionId) {\n      const session = this.#sessions.get(object.sessionId);\n      if (session) {\n        session._onMessage(object);\n      }\n    } else if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(object.id, (0, ErrorLike_js_1.createProtocolErrorMessage)(object), object.error.message);\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n  #onClose() {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    this.#transport.onmessage = undefined;\n    this.#transport.onclose = undefined;\n    this.#callbacks.clear();\n    for (const session of this.#sessions.values()) {\n      session._onClosed();\n    }\n    this.#sessions.clear();\n    this.emit(CDPSession_js_1.CDPSessionEvent.Disconnected, undefined);\n  }\n  dispose() {\n    this.#onClose();\n    this.#transport.close();\n  }\n  /**\n   * @internal\n   */\n  isAutoAttached(targetId) {\n    return !this.#manuallyAttached.has(targetId);\n  }\n  /**\n   * @internal\n   */\n  async _createSession(targetInfo, isAutoAttachEmulated = true) {\n    if (!isAutoAttachEmulated) {\n      this.#manuallyAttached.add(targetInfo.targetId);\n    }\n    const {\n      sessionId\n    } = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true\n    });\n    this.#manuallyAttached.delete(targetInfo.targetId);\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n    return session;\n  }\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n  async createSession(targetInfo) {\n    return await this._createSession(targetInfo, false);\n  }\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors() {\n    const result = [];\n    result.push(...this.#callbacks.getPendingProtocolErrors());\n    for (const session of this.#sessions.values()) {\n      result.push(...session.getPendingProtocolErrors());\n    }\n    return result;\n  }\n}\nexports.Connection = Connection;\n/**\n * @internal\n */\nfunction isTargetClosedError(error) {\n  return error instanceof Errors_js_1.TargetCloseError;\n}\nexports.isTargetClosedError = isTargetClosedError;","map":{"version":3,"names":["CDPSession_js_1","require","CallbackRegistry_js_1","Debug_js_1","Errors_js_1","EventEmitter_js_1","ErrorLike_js_1","CDPSession_js_2","debugProtocolSend","debug","debugProtocolReceive","Connection","EventEmitter","url","transport","delay","timeout","sessions","Map","closed","manuallyAttached","Set","callbacks","CallbackRegistry","constructor","onmessage","onMessage","bind","onclose","onClose","fromSession","session","connection","_closed","_sessions","sessionId","get","send","method","params","options","_rawSend","undefined","create","id","stringifiedMessage","JSON","stringify","closeBrowser","message","Promise","r","setTimeout","object","parse","CdpCDPSession","targetInfo","type","set","emit","CDPSessionEvent","SessionAttached","parentSession","_onClosed","delete","SessionDetached","_onMessage","error","reject","createProtocolErrorMessage","resolve","result","#onClose","clear","values","Disconnected","dispose","close","isAutoAttached","targetId","has","_createSession","isAutoAttachEmulated","add","flatten","Error","createSession","getPendingProtocolErrors","push","exports","isTargetClosedError","TargetCloseError"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/node_modules/puppeteer-core/src/cdp/Connection.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport type {CommandOptions} from '../api/CDPSession.js';\nimport {\n  CDPSessionEvent,\n  type CDPSession,\n  type CDPSessionEvents,\n} from '../api/CDPSession.js';\nimport {CallbackRegistry} from '../common/CallbackRegistry.js';\nimport type {ConnectionTransport} from '../common/ConnectionTransport.js';\nimport {debug} from '../common/Debug.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {createProtocolErrorMessage} from '../util/ErrorLike.js';\n\nimport {CdpCDPSession} from './CDPSession.js';\n\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\n\n/**\n * @public\n */\nexport type {ConnectionTransport, ProtocolMapping};\n\n/**\n * @public\n */\nexport class Connection extends EventEmitter<CDPSessionEvents> {\n  #url: string;\n  #transport: ConnectionTransport;\n  #delay: number;\n  #timeout: number;\n  #sessions = new Map<string, CdpCDPSession>();\n  #closed = false;\n  #manuallyAttached = new Set<string>();\n  #callbacks = new CallbackRegistry();\n\n  constructor(\n    url: string,\n    transport: ConnectionTransport,\n    delay = 0,\n    timeout?: number\n  ) {\n    super();\n    this.#url = url;\n    this.#delay = delay;\n    this.#timeout = timeout ?? 180_000;\n\n    this.#transport = transport;\n    this.#transport.onmessage = this.onMessage.bind(this);\n    this.#transport.onclose = this.#onClose.bind(this);\n  }\n\n  static fromSession(session: CDPSession): Connection | undefined {\n    return session.connection();\n  }\n\n  get timeout(): number {\n    return this.#timeout;\n  }\n\n  /**\n   * @internal\n   */\n  get _closed(): boolean {\n    return this.#closed;\n  }\n\n  /**\n   * @internal\n   */\n  get _sessions(): Map<string, CDPSession> {\n    return this.#sessions;\n  }\n\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n  session(sessionId: string): CDPSession | null {\n    return this.#sessions.get(sessionId) || null;\n  }\n\n  url(): string {\n    return this.#url;\n  }\n\n  send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    params?: ProtocolMapping.Commands[T]['paramsType'][0],\n    options?: CommandOptions\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    return this._rawSend(this.#callbacks, method, params, undefined, options);\n  }\n\n  /**\n   * @internal\n   */\n  _rawSend<T extends keyof ProtocolMapping.Commands>(\n    callbacks: CallbackRegistry,\n    method: T,\n    params: ProtocolMapping.Commands[T]['paramsType'][0],\n    sessionId?: string,\n    options?: CommandOptions\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    return callbacks.create(method, options?.timeout ?? this.#timeout, id => {\n      const stringifiedMessage = JSON.stringify({\n        method,\n        params,\n        id,\n        sessionId,\n      });\n      debugProtocolSend(stringifiedMessage);\n      this.#transport.send(stringifiedMessage);\n    }) as Promise<ProtocolMapping.Commands[T]['returnType']>;\n  }\n\n  /**\n   * @internal\n   */\n  async closeBrowser(): Promise<void> {\n    await this.send('Browser.close');\n  }\n\n  /**\n   * @internal\n   */\n  protected async onMessage(message: string): Promise<void> {\n    if (this.#delay) {\n      await new Promise(r => {\n        return setTimeout(r, this.#delay);\n      });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CdpCDPSession(\n        this,\n        object.params.targetInfo.type,\n        sessionId,\n        object.sessionId\n      );\n      this.#sessions.set(sessionId, session);\n      this.emit(CDPSessionEvent.SessionAttached, session);\n      const parentSession = this.#sessions.get(object.sessionId);\n      if (parentSession) {\n        parentSession.emit(CDPSessionEvent.SessionAttached, session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this.#sessions.get(object.params.sessionId);\n      if (session) {\n        session._onClosed();\n        this.#sessions.delete(object.params.sessionId);\n        this.emit(CDPSessionEvent.SessionDetached, session);\n        const parentSession = this.#sessions.get(object.sessionId);\n        if (parentSession) {\n          parentSession.emit(CDPSessionEvent.SessionDetached, session);\n        }\n      }\n    }\n    if (object.sessionId) {\n      const session = this.#sessions.get(object.sessionId);\n      if (session) {\n        session._onMessage(object);\n      }\n    } else if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(\n          object.id,\n          createProtocolErrorMessage(object),\n          object.error.message\n        );\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n\n  #onClose(): void {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    this.#transport.onmessage = undefined;\n    this.#transport.onclose = undefined;\n    this.#callbacks.clear();\n    for (const session of this.#sessions.values()) {\n      session._onClosed();\n    }\n    this.#sessions.clear();\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n\n  dispose(): void {\n    this.#onClose();\n    this.#transport.close();\n  }\n\n  /**\n   * @internal\n   */\n  isAutoAttached(targetId: string): boolean {\n    return !this.#manuallyAttached.has(targetId);\n  }\n\n  /**\n   * @internal\n   */\n  async _createSession(\n    targetInfo: Protocol.Target.TargetInfo,\n    isAutoAttachEmulated = true\n  ): Promise<CDPSession> {\n    if (!isAutoAttachEmulated) {\n      this.#manuallyAttached.add(targetInfo.targetId);\n    }\n    const {sessionId} = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true,\n    });\n    this.#manuallyAttached.delete(targetInfo.targetId);\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n    return session;\n  }\n\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n  async createSession(\n    targetInfo: Protocol.Target.TargetInfo\n  ): Promise<CDPSession> {\n    return await this._createSession(targetInfo, false);\n  }\n\n  /**\n   * @internal\n   */\n  getPendingProtocolErrors(): Error[] {\n    const result: Error[] = [];\n    result.push(...this.#callbacks.getPendingProtocolErrors());\n    for (const session of this.#sessions.values()) {\n      result.push(...session.getPendingProtocolErrors());\n    }\n    return result;\n  }\n}\n\n/**\n * @internal\n */\nexport function isTargetClosedError(error: Error): boolean {\n  return error instanceof TargetCloseError;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}