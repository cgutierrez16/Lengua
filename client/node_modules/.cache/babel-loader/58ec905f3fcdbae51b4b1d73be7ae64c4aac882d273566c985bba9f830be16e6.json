{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpBrowserContext = void 0;\nconst Browser_js_1 = require(\"../api/Browser.js\");\nconst BrowserContext_js_1 = require(\"../api/BrowserContext.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\n/**\n * @internal\n */\nclass CdpBrowserContext extends BrowserContext_js_1.BrowserContext {\n  #connection;\n  #browser;\n  #id;\n  constructor(connection, browser, contextId) {\n    super();\n    this.#connection = connection;\n    this.#browser = browser;\n    this.#id = contextId;\n  }\n  get id() {\n    return this.#id;\n  }\n  targets() {\n    return this.#browser.targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  async pages() {\n    const pages = await Promise.all(this.targets().filter(target => {\n      return target.type() === 'page' || target.type() === 'other' && this.#browser._getIsPageTargetCallback()?.(target);\n    }).map(target => {\n      return target.page();\n    }));\n    return pages.filter(page => {\n      return !!page;\n    });\n  }\n  isIncognito() {\n    return !!this.#id;\n  }\n  async overridePermissions(origin, permissions) {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission = Browser_js_1.WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await this.#connection.send('Browser.grantPermissions', {\n      origin,\n      browserContextId: this.#id || undefined,\n      permissions: protocolPermissions\n    });\n  }\n  async clearPermissionOverrides() {\n    await this.#connection.send('Browser.resetPermissions', {\n      browserContextId: this.#id || undefined\n    });\n  }\n  newPage() {\n    return this.#browser._createPageInContext(this.#id);\n  }\n  browser() {\n    return this.#browser;\n  }\n  async close() {\n    (0, assert_js_1.assert)(this.#id, 'Non-incognito profiles cannot be closed!');\n    await this.#browser._disposeContext(this.#id);\n  }\n}\nexports.CdpBrowserContext = CdpBrowserContext;","map":{"version":3,"names":["Browser_js_1","require","BrowserContext_js_1","assert_js_1","CdpBrowserContext","BrowserContext","connection","browser","id","constructor","contextId","targets","filter","target","browserContext","pages","Promise","all","type","_getIsPageTargetCallback","map","page","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","WEB_PERMISSION_TO_PROTOCOL_PERMISSION","get","Error","send","browserContextId","undefined","clearPermissionOverrides","newPage","_createPageInContext","close","assert","_disposeContext","exports"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/node_modules/puppeteer-core/src/cdp/BrowserContext.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2024 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  WEB_PERMISSION_TO_PROTOCOL_PERMISSION,\n  type Permission,\n} from '../api/Browser.js';\nimport {BrowserContext} from '../api/BrowserContext.js';\nimport type {Page} from '../api/Page.js';\nimport {assert} from '../util/assert.js';\n\nimport type {CdpBrowser} from './Browser.js';\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\n\n/**\n * @internal\n */\nexport class CdpBrowserContext extends BrowserContext {\n  #connection: Connection;\n  #browser: CdpBrowser;\n  #id?: string;\n\n  constructor(connection: Connection, browser: CdpBrowser, contextId?: string) {\n    super();\n    this.#connection = connection;\n    this.#browser = browser;\n    this.#id = contextId;\n  }\n\n  override get id(): string | undefined {\n    return this.#id;\n  }\n\n  override targets(): CdpTarget[] {\n    return this.#browser.targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n\n  override async pages(): Promise<Page[]> {\n    const pages = await Promise.all(\n      this.targets()\n        .filter(target => {\n          return (\n            target.type() === 'page' ||\n            (target.type() === 'other' &&\n              this.#browser._getIsPageTargetCallback()?.(target))\n          );\n        })\n        .map(target => {\n          return target.page();\n        })\n    );\n    return pages.filter((page): page is Page => {\n      return !!page;\n    });\n  }\n\n  override isIncognito(): boolean {\n    return !!this.#id;\n  }\n\n  override async overridePermissions(\n    origin: string,\n    permissions: Permission[]\n  ): Promise<void> {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission =\n        WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await this.#connection.send('Browser.grantPermissions', {\n      origin,\n      browserContextId: this.#id || undefined,\n      permissions: protocolPermissions,\n    });\n  }\n\n  override async clearPermissionOverrides(): Promise<void> {\n    await this.#connection.send('Browser.resetPermissions', {\n      browserContextId: this.#id || undefined,\n    });\n  }\n\n  override newPage(): Promise<Page> {\n    return this.#browser._createPageInContext(this.#id);\n  }\n\n  override browser(): CdpBrowser {\n    return this.#browser;\n  }\n\n  override async close(): Promise<void> {\n    assert(this.#id, 'Non-incognito profiles cannot be closed!');\n    await this.#browser._disposeContext(this.#id);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}