{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LyricTypingInput = ({\n  lines\n}) => {\n  _s();\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(lines.map(line => line.split(\" \").map(() => \"\")));\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const newInputs = inputs.map((line, li) => line.map((word, wi) => {\n      if (li === lineIndex && wi === wordIndex) {\n        return e.target.value;\n      }\n      return word;\n    }));\n    setInputs(newInputs);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lines.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: line.split(\" \").map((word, wordIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputs[lineIndex][wordIndex],\n        onChange: e => handleChange(e, lineIndex, wordIndex),\n        style: {\n          width: `${word.length * 10}px`,\n          // Adjust the width based on the length of the word\n          margin: '0 5px',\n          textAlign: 'center',\n          border: 'none',\n          borderBottom: '2px solid #000',\n          // Add bottom border to simulate underline\n          outline: 'none',\n          // Remove outline on focus\n          backgroundColor: 'transparent',\n          // Transparent background\n          padding: '2px 0' // Adjust padding for better alignment\n        }\n      }, wordIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this))\n    }, lineIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(LyricTypingInput, \"Y5dsLz3p3xC3sD+vDN7STSGwO0g=\");\n_c = LyricTypingInput;\nvar _c;\n$RefreshReg$(_c, \"LyricTypingInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LyricTypingInput","lines","_s","inputs","setInputs","map","line","split","handleChange","e","lineIndex","wordIndex","newInputs","li","word","wi","target","value","children","style","marginBottom","type","onChange","width","length","margin","textAlign","border","borderBottom","outline","backgroundColor","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport const LyricTypingInput = ({ lines }) => {\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(\n    lines.map((line) => line.split(\" \").map(() => \"\"))\n  );\n\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const newInputs = inputs.map((line, li) =>\n      line.map((word, wi) => {\n        if (li === lineIndex && wi === wordIndex) {\n          return e.target.value;\n        }\n        return word;\n      })\n    );\n    setInputs(newInputs);\n  };\n\n  return (\n    <div>\n      {lines.map((line, lineIndex) => (\n        <div key={lineIndex} style={{ marginBottom: \"10px\" }}>\n          {line.split(\" \").map((word, wordIndex) => (\n            <input\n              key={wordIndex}\n              type=\"text\"\n              value={inputs[lineIndex][wordIndex]}\n              onChange={(e) => handleChange(e, lineIndex, wordIndex)}\n              style={{\n                width: `${word.length * 10}px`, // Adjust the width based on the length of the word\n                margin: '0 5px',\n                textAlign: 'center',\n                border: 'none',\n                borderBottom: '2px solid #000', // Add bottom border to simulate underline\n                outline: 'none', // Remove outline on focus\n                backgroundColor: 'transparent', // Transparent background\n                padding: '2px 0' // Adjust padding for better alignment\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAClCI,KAAK,CAACI,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACF,GAAG,CAAC,MAAM,EAAE,CAAC,CACnD,CAAC;EAED,MAAMG,YAAY,GAAGA,CAACC,CAAC,EAAEC,SAAS,EAAEC,SAAS,KAAK;IAChD,MAAMC,SAAS,GAAGT,MAAM,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEO,EAAE,KACpCP,IAAI,CAACD,GAAG,CAAC,CAACS,IAAI,EAAEC,EAAE,KAAK;MACrB,IAAIF,EAAE,KAAKH,SAAS,IAAIK,EAAE,KAAKJ,SAAS,EAAE;QACxC,OAAOF,CAAC,CAACO,MAAM,CAACC,KAAK;MACvB;MACA,OAAOH,IAAI;IACb,CAAC,CACH,CAAC;IACDV,SAAS,CAACQ,SAAS,CAAC;EACtB,CAAC;EAED,oBACEb,OAAA;IAAAmB,QAAA,EACGjB,KAAK,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEI,SAAS,kBACzBX,OAAA;MAAqBoB,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAF,QAAA,EAClDZ,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACF,GAAG,CAAC,CAACS,IAAI,EAAEH,SAAS,kBACnCZ,OAAA;QAEEsB,IAAI,EAAC,MAAM;QACXJ,KAAK,EAAEd,MAAM,CAACO,SAAS,CAAC,CAACC,SAAS,CAAE;QACpCW,QAAQ,EAAGb,CAAC,IAAKD,YAAY,CAACC,CAAC,EAAEC,SAAS,EAAEC,SAAS,CAAE;QACvDQ,KAAK,EAAE;UACLI,KAAK,EAAG,GAAET,IAAI,CAACU,MAAM,GAAG,EAAG,IAAG;UAAE;UAChCC,MAAM,EAAE,OAAO;UACfC,SAAS,EAAE,QAAQ;UACnBC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,gBAAgB;UAAE;UAChCC,OAAO,EAAE,MAAM;UAAE;UACjBC,eAAe,EAAE,aAAa;UAAE;UAChCC,OAAO,EAAE,OAAO,CAAC;QACnB;MAAE,GAbGpB,SAAS;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcf,CACF;IAAC,GAlBMzB,SAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAmBd,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CA5CWF,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}