{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LyricTypingInput = ({\n  lines,\n  lyricRefs\n}) => {\n  _s();\n  const [lineHeights, setLineHeights] = useState([]);\n  const inputRefs = useRef([]);\n  const lyricsRef = useRef(null); // Ref for lyrics container\n\n  const tempArray = [\"You have no idea\", \"How I've been spending my time\", \"How difficult it is to speak without convincing\", \"How much can you love a woman\", \"You have no idea\", \"How are my early mornings\"];\n  if (!lines || !lines.length) {\n    lines = tempArray;\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(lines.map(line => line.split(\" \").map(() => \"\")));\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const {\n      value\n    } = e.target;\n    const newInputs = inputs.map((line, li) => line.map((word, wi) => li === lineIndex && wi === wordIndex ? value : word));\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      var _inputRefs$current$li;\n      const nextInput = (_inputRefs$current$li = inputRefs.current[lineIndex]) === null || _inputRefs$current$li === void 0 ? void 0 : _inputRefs$current$li[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n\n  // Function to calculate line heights dynamically\n  const calculateLineHeights = () => {\n    if (!lyricsRef.current) return [];\n    const elements = lyricsRef.current.querySelectorAll(\".lyric-line\");\n    return Array.from(elements).map(el => el.getBoundingClientRect().height);\n  };\n  useEffect(() => {\n    // Recalculate line heights after rendering new lyrics\n    setLineHeights([]); // Reset to prevent old values from lingering\n    setTimeout(() => setLineHeights(calculateLineHeights()), 0);\n  }, [lines]); // Runs when a new song is searched\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: lyricsRef,\n    children: lines.map((line, lineIndex) => {\n      var _lines$lineIndex;\n      const wordCount = ((_lines$lineIndex = lines[lineIndex]) === null || _lines$lineIndex === void 0 ? void 0 : _lines$lineIndex.split(\" \").length) || 3; // Fallback to 3 words\n      const inputWidth = `${wordCount * 4.25}rem`; // Adjust multiplier as needed\n      const marginTopValue = Math.max(0, lineHeights[lineIndex] - 48) + (lineHeights[lineIndex] > 48 ? 10 : 0);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-lyrics-align test lyric-line\",\n        style: {\n          marginTop: `${marginTopValue}px`,\n          marginBottom: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: {\n            width: inputWidth,\n            margin: \"0 5px\",\n            textAlign: \"left\",\n            border: \"none\",\n            borderBottom: \"2px solid #000\",\n            outline: \"none\",\n            backgroundColor: \"transparent\",\n            padding: \"2px 0\",\n            paddingRight: \"5px\"\n          },\n          maxLength: wordCount * 6 // Roughly 6 characters per word\n        }, lineIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, lineIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(LyricTypingInput, \"+r9gaaIiewrvVDQux2Txl3A5jJM=\");\n_c = LyricTypingInput;\nvar _c;\n$RefreshReg$(_c, \"LyricTypingInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LyricTypingInput","lines","lyricRefs","_s","lineHeights","setLineHeights","inputRefs","lyricsRef","tempArray","length","inputs","setInputs","map","line","split","handleChange","e","lineIndex","wordIndex","value","target","newInputs","li","word","wi","maxLength","_inputRefs$current$li","nextInput","current","focus","calculateLineHeights","elements","querySelectorAll","Array","from","el","getBoundingClientRect","height","setTimeout","ref","children","_lines$lineIndex","wordCount","inputWidth","marginTopValue","Math","max","className","style","marginTop","marginBottom","type","width","margin","textAlign","border","borderBottom","outline","backgroundColor","padding","paddingRight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport const LyricTypingInput = ({ lines, lyricRefs }) => {\n  const [lineHeights, setLineHeights] = useState([]);\n  const inputRefs = useRef([]);\n  const lyricsRef = useRef(null); // Ref for lyrics container\n\n  const tempArray = [\n    \"You have no idea\",\n    \"How I've been spending my time\",\n    \"How difficult it is to speak without convincing\",\n    \"How much can you love a woman\",\n    \"You have no idea\",\n    \"How are my early mornings\",\n  ];\n\n  if (!lines || !lines.length) {\n    lines = tempArray;\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(\n    lines.map((line) => line.split(\" \").map(() => \"\"))\n  );\n\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const { value } = e.target;\n    const newInputs = inputs.map((line, li) =>\n      line.map((word, wi) => (li === lineIndex && wi === wordIndex ? value : word))\n    );\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      const nextInput = inputRefs.current[lineIndex]?.[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n\n  // Function to calculate line heights dynamically\n  const calculateLineHeights = () => {\n    if (!lyricsRef.current) return [];\n\n    const elements = lyricsRef.current.querySelectorAll(\".lyric-line\");\n    return Array.from(elements).map((el) => el.getBoundingClientRect().height);\n  };\n\n  useEffect(() => {\n    // Recalculate line heights after rendering new lyrics\n    setLineHeights([]); // Reset to prevent old values from lingering\n    setTimeout(() => setLineHeights(calculateLineHeights()), 0);\n  }, [lines]); // Runs when a new song is searched\n\n  return (\n    <div ref={lyricsRef}>\n      {lines.map((line, lineIndex) => {\n        const wordCount = lines[lineIndex]?.split(\" \").length || 3; // Fallback to 3 words\n        const inputWidth = `${wordCount * 4.25}rem`; // Adjust multiplier as needed\n        const marginTopValue =\n          Math.max(0, lineHeights[lineIndex] - 48) +\n          (lineHeights[lineIndex] > 48 ? 10 : 0);\n\n        return (\n          <div\n            key={lineIndex}\n            className=\"input-lyrics-align test lyric-line\"\n            style={{\n              marginTop: `${marginTopValue}px`,\n              marginBottom: \"10px\",\n            }}\n          >\n            <input\n              type=\"text\"\n              key={lineIndex}\n              style={{\n                width: inputWidth,\n                margin: \"0 5px\",\n                textAlign: \"left\",\n                border: \"none\",\n                borderBottom: \"2px solid #000\",\n                outline: \"none\",\n                backgroundColor: \"transparent\",\n                padding: \"2px 0\",\n                paddingRight: \"5px\",\n              }}\n              maxLength={wordCount * 6} // Roughly 6 characters per word\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}