{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LyricTypingInput = ({\n  lines,\n  lyricRefs\n}) => {\n  _s();\n  const [lineHeights, setLineHeights] = useState([]);\n  const inputRefs = useRef([]);\n  const tempArray = [\"You have no idea\", \"How I've been spending my time\", \"How difficult it is to speak without convincing\", \"How much can you love a woman\", \"You have no idea\", \"How are my early mornings\"];\n  if (!lines || !lines.length) {\n    lines = tempArray;\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(lines.map(line => line.split(\" \").map(() => \"\")));\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const {\n      value\n    } = e.target;\n    const newInputs = inputs.map((line, li) => line.map((word, wi) => {\n      if (li === lineIndex && wi === wordIndex) {\n        return value;\n      }\n      return word;\n    }));\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      var _inputRefs$current$li;\n      const nextInput = (_inputRefs$current$li = inputRefs.current[lineIndex]) === null || _inputRefs$current$li === void 0 ? void 0 : _inputRefs$current$li[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n  useEffect(() => {\n    if (lyricRefs.current) {\n      const heights = lyricRefs.current.map(ref => (ref === null || ref === void 0 ? void 0 : ref.offsetHeight) || 0);\n      setLineHeights(heights);\n    }\n  }, [lyricRefs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lines.map((line, lineIndex) => {\n      var _lines$lineIndex;\n      const wordCount = ((_lines$lineIndex = lines[lineIndex]) === null || _lines$lineIndex === void 0 ? void 0 : _lines$lineIndex.split(\" \").length) || 3; // Fallback to 3 words\n      const inputWidth = `${wordCount * 4.25}rem`; // Adjust multiplier as needed\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test input-lyrics-align\",\n        style: {\n          marginTop: `${Math.max(0, lineHeights[lineIndex] - 60)}px`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: {\n            width: inputWidth,\n            margin: \"0 5px\",\n            textAlign: \"left\",\n            border: \"none\",\n            borderBottom: \"2px solid #000\",\n            outline: \"none\",\n            backgroundColor: \"transparent\",\n            padding: \"2px 0\",\n            paddingRight: \"5px\"\n          },\n          maxLength: wordCount * 6 // Roughly 6 characters per word\n        }, lineIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, lineIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(LyricTypingInput, \"kzVDVBZVFq83ANTCT9iiYdxV/RU=\");\n_c = LyricTypingInput;\nvar _c;\n$RefreshReg$(_c, \"LyricTypingInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LyricTypingInput","lines","lyricRefs","_s","lineHeights","setLineHeights","inputRefs","tempArray","length","inputs","setInputs","map","line","split","handleChange","e","lineIndex","wordIndex","value","target","newInputs","li","word","wi","maxLength","_inputRefs$current$li","nextInput","current","focus","heights","ref","offsetHeight","children","_lines$lineIndex","wordCount","inputWidth","className","style","marginTop","Math","max","type","width","margin","textAlign","border","borderBottom","outline","backgroundColor","padding","paddingRight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport const LyricTypingInput = ({ lines, lyricRefs }) => {\n  const [lineHeights, setLineHeights] = useState([]);\n  const inputRefs = useRef([]);\n\n  const tempArray = [\n    \"You have no idea\",\n    \"How I've been spending my time\",\n    \"How difficult it is to speak without convincing\",\n    \"How much can you love a woman\",\n    \"You have no idea\",\n    \"How are my early mornings\",\n  ];\n\n  if (!lines || !lines.length) {\n    lines = tempArray;\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(\n    lines.map((line) => line.split(\" \").map(() => \"\"))\n  );\n\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const { value } = e.target;\n    const newInputs = inputs.map((line, li) =>\n      line.map((word, wi) => {\n        if (li === lineIndex && wi === wordIndex) {\n          return value;\n        }\n        return word;\n      })\n    );\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      const nextInput = inputRefs.current[lineIndex]?.[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n\n  useEffect(() => {\n    if (lyricRefs.current) {\n      const heights = lyricRefs.current.map((ref) => ref?.offsetHeight || 0);\n      setLineHeights(heights);\n    }\n  }, [lyricRefs]);\n\n  return (\n    <div>\n      {lines.map((line, lineIndex) => {\n        const wordCount = lines[lineIndex]?.split(\" \").length || 3; // Fallback to 3 words\n        const inputWidth = `${wordCount * 4.25}rem`; // Adjust multiplier as needed\n\n        return (\n          <div\n            key={lineIndex}\n            className=\"test input-lyrics-align\"\n            style={{\n              marginTop: `${Math.max(0, lineHeights[lineIndex] - 60)}px`,\n            }}\n          >\n            <input\n              type=\"text\"\n              key={lineIndex}\n              style={{\n                width: inputWidth,\n                margin: \"0 5px\",\n                textAlign: \"left\",\n                border: \"none\",\n                borderBottom: \"2px solid #000\",\n                outline: \"none\",\n                backgroundColor: \"transparent\",\n                padding: \"2px 0\",\n                paddingRight: \"5px\",\n              }}\n              maxLength={wordCount * 6} // Roughly 6 characters per word\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}