{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LyricsTypingInput = ({\n  lines\n}) => {\n  _s();\n  const [inputs, setInputs] = useState(lines.map(line => line.split(' ').map(() => '')));\n  const inputRefs = useRef([]);\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const {\n      value\n    } = e.target;\n    const newInputs = inputs.map((line, li) => line.map((word, wi) => {\n      if (li === lineIndex && wi === wordIndex) {\n        return value;\n      }\n      return word;\n    }));\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      const nextInput = inputRefs.current[lineIndex][wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lines.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: line.split(' ').map((word, wordIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputs[lineIndex][wordIndex],\n        onChange: e => handleChange(e, lineIndex, wordIndex),\n        style: {\n          width: `${word.length * 10}px`,\n          // Adjust the width based on the length of the word\n          margin: '0 5px',\n          textAlign: 'left',\n          // Align text to the left\n          border: 'none',\n          borderBottom: '2px solid #000',\n          // Add bottom border to simulate underline\n          outline: 'none',\n          // Remove outline on focus\n          backgroundColor: 'transparent',\n          // Transparent background\n          padding: '2px 0' // Adjust padding for better alignment\n        },\n        maxLength: word.length // Limit the number of characters to the length of the word\n        ,\n        ref: el => inputRefs.current[lineIndex][wordIndex] = el // Store ref to focus later\n      }, wordIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, lineIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(LyricsTypingInput, \"CrbLCi2rQ2XISrWWJdjaOrzfRCM=\");\n_c = LyricsTypingInput;\nvar _c;\n$RefreshReg$(_c, \"LyricsTypingInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LyricsTypingInput","lines","_s","inputs","setInputs","map","line","split","inputRefs","handleChange","e","lineIndex","wordIndex","value","target","newInputs","li","word","wi","length","maxLength","nextInput","current","focus","children","style","marginBottom","type","onChange","width","margin","textAlign","border","borderBottom","outline","backgroundColor","padding","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport const LyricsTypingInput = ({ lines }) => {\n  const [inputs, setInputs] = useState(\n    lines.map(line => line.split(' ').map(() => ''))\n  );\n\n  const inputRefs = useRef([]);\n\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const { value } = e.target;\n    const newInputs = inputs.map((line, li) =>\n      line.map((word, wi) => {\n        if (li === lineIndex && wi === wordIndex) {\n          return value;\n        }\n        return word;\n      })\n    );\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      const nextInput = inputRefs.current[lineIndex][wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n\n  return (\n    <div>\n      {lines.map((line, lineIndex) => (\n        <div key={lineIndex} style={{ marginBottom: '20px' }}>\n          {line.split(' ').map((word, wordIndex) => (\n            <input\n              key={wordIndex}\n              type=\"text\"\n              value={inputs[lineIndex][wordIndex]}\n              onChange={(e) => handleChange(e, lineIndex, wordIndex)}\n              style={{\n                width: `${word.length * 10}px`, // Adjust the width based on the length of the word\n                margin: '0 5px',\n                textAlign: 'left', // Align text to the left\n                border: 'none',\n                borderBottom: '2px solid #000', // Add bottom border to simulate underline\n                outline: 'none', // Remove outline on focus\n                backgroundColor: 'transparent', // Transparent background\n                padding: '2px 0' // Adjust padding for better alignment\n              }}\n              maxLength={word.length} // Limit the number of characters to the length of the word\n              ref={(el) => (inputRefs.current[lineIndex][wordIndex] = el)} // Store ref to focus later\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}