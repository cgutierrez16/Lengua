{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpElementHandle = void 0;\nconst ElementHandle_js_1 = require(\"../api/ElementHandle.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst decorators_js_1 = require(\"../util/decorators.js\");\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n/**\n * The CdpElementHandle extends ElementHandle now to keep compatibility\n * with `instanceof` because of that we need to have methods for\n * CdpJSHandle to in this implementation as well.\n *\n * @internal\n */\nlet CdpElementHandle = (() => {\n  var _a, _b;\n  let _classSuper = ElementHandle_js_1.ElementHandle;\n  let _instanceExtraInitializers = [];\n  let _contentFrame_decorators;\n  let _scrollIntoView_decorators;\n  let _uploadFile_decorators;\n  let _autofill_decorators;\n  return class CdpElementHandle extends _classSuper {\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      _contentFrame_decorators = [(0, decorators_js_1.throwIfDisposed)()];\n      _scrollIntoView_decorators = [(0, decorators_js_1.throwIfDisposed)(), (_a = ElementHandle_js_1.ElementHandle).bindIsolatedHandle.bind(_a)];\n      _uploadFile_decorators = [(0, decorators_js_1.throwIfDisposed)(), (_b = ElementHandle_js_1.ElementHandle).bindIsolatedHandle.bind(_b)];\n      _autofill_decorators = [(0, decorators_js_1.throwIfDisposed)()];\n      __esDecorate(this, null, _contentFrame_decorators, {\n        kind: \"method\",\n        name: \"contentFrame\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"contentFrame\" in obj,\n          get: obj => obj.contentFrame\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _scrollIntoView_decorators, {\n        kind: \"method\",\n        name: \"scrollIntoView\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"scrollIntoView\" in obj,\n          get: obj => obj.scrollIntoView\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _uploadFile_decorators, {\n        kind: \"method\",\n        name: \"uploadFile\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"uploadFile\" in obj,\n          get: obj => obj.uploadFile\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _autofill_decorators, {\n        kind: \"method\",\n        name: \"autofill\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"autofill\" in obj,\n          get: obj => obj.autofill\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    }\n    constructor(world, remoteObject) {\n      super(new JSHandle_js_1.CdpJSHandle(world, remoteObject));\n      __runInitializers(this, _instanceExtraInitializers);\n    }\n    get realm() {\n      return this.handle.realm;\n    }\n    get client() {\n      return this.handle.client;\n    }\n    remoteObject() {\n      return this.handle.remoteObject();\n    }\n    get #frameManager() {\n      return this.frame._frameManager;\n    }\n    get frame() {\n      return this.realm.environment;\n    }\n    async contentFrame() {\n      const nodeInfo = await this.client.send('DOM.describeNode', {\n        objectId: this.id\n      });\n      if (typeof nodeInfo.node.frameId !== 'string') {\n        return null;\n      }\n      return this.#frameManager.frame(nodeInfo.node.frameId);\n    }\n    async scrollIntoView() {\n      await this.assertConnectedElement();\n      try {\n        await this.client.send('DOM.scrollIntoViewIfNeeded', {\n          objectId: this.id\n        });\n      } catch (error) {\n        (0, util_js_1.debugError)(error);\n        // Fallback to Element.scrollIntoView if DOM.scrollIntoViewIfNeeded is not supported\n        await super.scrollIntoView();\n      }\n    }\n    async uploadFile(...filePaths) {\n      const isMultiple = await this.evaluate(element => {\n        return element.multiple;\n      });\n      (0, assert_js_1.assert)(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n      // Locate all files and confirm that they exist.\n      let path;\n      try {\n        path = await Promise.resolve().then(() => __importStar(require('path')));\n      } catch (error) {\n        if (error instanceof TypeError) {\n          throw new Error(`JSHandle#uploadFile can only be used in Node-like environments.`);\n        }\n        throw error;\n      }\n      const files = filePaths.map(filePath => {\n        if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n          return filePath;\n        } else {\n          return path.resolve(filePath);\n        }\n      });\n      /**\n       * The zero-length array is a special case, it seems that\n       * DOM.setFileInputFiles does not actually update the files in that case, so\n       * the solution is to eval the element value to a new FileList directly.\n       */\n      if (files.length === 0) {\n        // XXX: These events should converted to trusted events. Perhaps do this\n        // in `DOM.setFileInputFiles`?\n        await this.evaluate(element => {\n          element.files = new DataTransfer().files;\n          // Dispatch events for this case because it should behave akin to a user action.\n          element.dispatchEvent(new Event('input', {\n            bubbles: true,\n            composed: true\n          }));\n          element.dispatchEvent(new Event('change', {\n            bubbles: true\n          }));\n        });\n        return;\n      }\n      const {\n        node: {\n          backendNodeId\n        }\n      } = await this.client.send('DOM.describeNode', {\n        objectId: this.id\n      });\n      await this.client.send('DOM.setFileInputFiles', {\n        objectId: this.id,\n        files,\n        backendNodeId\n      });\n    }\n    async autofill(data) {\n      const nodeInfo = await this.client.send('DOM.describeNode', {\n        objectId: this.handle.id\n      });\n      const fieldId = nodeInfo.node.backendNodeId;\n      const frameId = this.frame._id;\n      await this.client.send('Autofill.trigger', {\n        fieldId,\n        frameId,\n        card: data.creditCard\n      });\n    }\n  };\n})();\nexports.CdpElementHandle = CdpElementHandle;","map":{"version":3,"names":["ElementHandle_js_1","require","util_js_1","assert_js_1","decorators_js_1","JSHandle_js_1","CdpElementHandle","ElementHandle","_classSuper","throwIfDisposed","_a","bindIsolatedHandle","bind","_b","__esDecorate","_contentFrame_decorators","kind","name","static","private","access","has","obj","get","contentFrame","metadata","_metadata","_instanceExtraInitializers","_scrollIntoView_decorators","scrollIntoView","_uploadFile_decorators","uploadFile","_autofill_decorators","autofill","constructor","world","remoteObject","CdpJSHandle","realm","handle","client","frameManager","#frameManager","frame","_frameManager","environment","nodeInfo","send","objectId","id","node","frameId","assertConnectedElement","error","debugError","filePaths","isMultiple","evaluate","element","multiple","assert","length","path","Promise","resolve","then","__importStar","TypeError","Error","files","map","filePath","win32","isAbsolute","posix","DataTransfer","dispatchEvent","Event","bubbles","composed","backendNodeId","data","fieldId","_id","card","creditCard","exports"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/node_modules/puppeteer-core/src/cdp/ElementHandle.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type Path from 'path';\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {ElementHandle, type AutofillData} from '../api/ElementHandle.js';\nimport {debugError} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {throwIfDisposed} from '../util/decorators.js';\n\nimport type {CdpFrame} from './Frame.js';\nimport type {FrameManager} from './FrameManager.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {CdpJSHandle} from './JSHandle.js';\n\n/**\n * The CdpElementHandle extends ElementHandle now to keep compatibility\n * with `instanceof` because of that we need to have methods for\n * CdpJSHandle to in this implementation as well.\n *\n * @internal\n */\nexport class CdpElementHandle<\n  ElementType extends Node = Element,\n> extends ElementHandle<ElementType> {\n  protected declare readonly handle: CdpJSHandle<ElementType>;\n\n  constructor(\n    world: IsolatedWorld,\n    remoteObject: Protocol.Runtime.RemoteObject\n  ) {\n    super(new CdpJSHandle(world, remoteObject));\n  }\n\n  override get realm(): IsolatedWorld {\n    return this.handle.realm;\n  }\n\n  get client(): CDPSession {\n    return this.handle.client;\n  }\n\n  override remoteObject(): Protocol.Runtime.RemoteObject {\n    return this.handle.remoteObject();\n  }\n\n  get #frameManager(): FrameManager {\n    return this.frame._frameManager;\n  }\n\n  override get frame(): CdpFrame {\n    return this.realm.environment as CdpFrame;\n  }\n\n  override async contentFrame(\n    this: ElementHandle<HTMLIFrameElement>\n  ): Promise<CdpFrame>;\n\n  @throwIfDisposed()\n  override async contentFrame(): Promise<CdpFrame | null> {\n    const nodeInfo = await this.client.send('DOM.describeNode', {\n      objectId: this.id,\n    });\n    if (typeof nodeInfo.node.frameId !== 'string') {\n      return null;\n    }\n    return this.#frameManager.frame(nodeInfo.node.frameId);\n  }\n\n  @throwIfDisposed()\n  @ElementHandle.bindIsolatedHandle\n  override async scrollIntoView(\n    this: CdpElementHandle<Element>\n  ): Promise<void> {\n    await this.assertConnectedElement();\n    try {\n      await this.client.send('DOM.scrollIntoViewIfNeeded', {\n        objectId: this.id,\n      });\n    } catch (error) {\n      debugError(error);\n      // Fallback to Element.scrollIntoView if DOM.scrollIntoViewIfNeeded is not supported\n      await super.scrollIntoView();\n    }\n  }\n\n  @throwIfDisposed()\n  @ElementHandle.bindIsolatedHandle\n  override async uploadFile(\n    this: CdpElementHandle<HTMLInputElement>,\n    ...filePaths: string[]\n  ): Promise<void> {\n    const isMultiple = await this.evaluate(element => {\n      return element.multiple;\n    });\n    assert(\n      filePaths.length <= 1 || isMultiple,\n      'Multiple file uploads only work with <input type=file multiple>'\n    );\n\n    // Locate all files and confirm that they exist.\n    let path: typeof Path;\n    try {\n      path = await import('path');\n    } catch (error) {\n      if (error instanceof TypeError) {\n        throw new Error(\n          `JSHandle#uploadFile can only be used in Node-like environments.`\n        );\n      }\n      throw error;\n    }\n    const files = filePaths.map(filePath => {\n      if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n        return filePath;\n      } else {\n        return path.resolve(filePath);\n      }\n    });\n\n    /**\n     * The zero-length array is a special case, it seems that\n     * DOM.setFileInputFiles does not actually update the files in that case, so\n     * the solution is to eval the element value to a new FileList directly.\n     */\n    if (files.length === 0) {\n      // XXX: These events should converted to trusted events. Perhaps do this\n      // in `DOM.setFileInputFiles`?\n      await this.evaluate(element => {\n        element.files = new DataTransfer().files;\n\n        // Dispatch events for this case because it should behave akin to a user action.\n        element.dispatchEvent(\n          new Event('input', {bubbles: true, composed: true})\n        );\n        element.dispatchEvent(new Event('change', {bubbles: true}));\n      });\n      return;\n    }\n\n    const {\n      node: {backendNodeId},\n    } = await this.client.send('DOM.describeNode', {\n      objectId: this.id,\n    });\n    await this.client.send('DOM.setFileInputFiles', {\n      objectId: this.id,\n      files,\n      backendNodeId,\n    });\n  }\n\n  @throwIfDisposed()\n  override async autofill(data: AutofillData): Promise<void> {\n    const nodeInfo = await this.client.send('DOM.describeNode', {\n      objectId: this.handle.id,\n    });\n    const fieldId = nodeInfo.node.backendNodeId;\n    const frameId = this.frame._id;\n    await this.client.send('Autofill.trigger', {\n      fieldId,\n      frameId,\n      card: data.creditCard,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}