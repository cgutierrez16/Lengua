{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/misc/hugging.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Hugging = () => {\n  _s();\n  const [sentenceSimilarityRes, setSentenceSimilarityRes] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle loading state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const hf = new HfInference(process.env.REACT_APP_HUGGING_FACE_TOKEN || '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');\n      try {\n        let result = await hf.sentenceSimilarity({\n          model: \"sentence-transformers/paraphrase-xlm-r-multilingual-v1\",\n          inputs: {\n            source_sentence: \"You have no idea\",\n            sentences: [\"You can't imagine\", \"You don't have an idea\", \"You cannot imagine\", \"You have no idea\"]\n          }\n        });\n        setSentenceSimilarityRes(result); // Set the result when fetched\n      } catch (error) {\n        console.error(\"Error fetching sentence similarity:\", error);\n      } finally {\n        setLoading(false); // Stop loading once the result is fetched\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"balls lol hug\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sentence Similarity Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), sentenceSimilarityRes ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: sentenceSimilarityRes.map((similarity, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Similarity score: \", similarity]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No results available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Hugging, \"Fo8B0BeB5QcuCnNzuYyvRJVZCtg=\");\n_c = Hugging;\nvar _c;\n$RefreshReg$(_c, \"Hugging\");","map":{"version":3,"names":["React","useEffect","useState","HfInference","jsxDEV","_jsxDEV","Hugging","_s","sentenceSimilarityRes","setSentenceSimilarityRes","loading","setLoading","fetchData","hf","process","env","REACT_APP_HUGGING_FACE_TOKEN","result","sentenceSimilarity","model","inputs","source_sentence","sentences","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","similarity","index","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/misc/hugging.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { HfInference } from \"@huggingface/inference\";\n\nexport const Hugging = () => {\n  const [sentenceSimilarityRes, setSentenceSimilarityRes] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle loading state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const hf = new HfInference(process.env.REACT_APP_HUGGING_FACE_TOKEN || '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');\n      \n      try {\n        let result = await hf.sentenceSimilarity({\n          model: \"sentence-transformers/paraphrase-xlm-r-multilingual-v1\",\n          inputs: {\n            source_sentence: \"You have no idea\",\n            sentences: [\n              \"You can't imagine\",\n              \"You don't have an idea\",\n              \"You cannot imagine\",\n              \"You have no idea\",\n            ],\n          },\n        });\n        setSentenceSimilarityRes(result); // Set the result when fetched\n      } catch (error) {\n        console.error(\"Error fetching sentence similarity:\", error);\n      } finally {\n        setLoading(false); // Stop loading once the result is fetched\n      }\n    };\n\n    fetchData();\n  }, []);\n  return (\n    <div>\n      <h2>balls lol hug</h2>\n      <div>\n      <h2>Sentence Similarity Results</h2>\n      {sentenceSimilarityRes ? (\n        <ul>\n          {sentenceSimilarityRes.map((similarity, index) => (\n            <li key={index}>Similarity score: {similarity}</li>\n          ))}\n        </ul>\n      ) : (\n        <p>No results available.</p>\n      )}\n    </div>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxE,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,EAAE,GAAG,IAAIV,WAAW,CAACW,OAAO,CAACC,GAAG,CAACC,4BAA4B,IAAI,uCAAuC,CAAC;MAE/G,IAAI;QACF,IAAIC,MAAM,GAAG,MAAMJ,EAAE,CAACK,kBAAkB,CAAC;UACvCC,KAAK,EAAE,wDAAwD;UAC/DC,MAAM,EAAE;YACNC,eAAe,EAAE,kBAAkB;YACnCC,SAAS,EAAE,CACT,mBAAmB,EACnB,wBAAwB,EACxB,oBAAoB,EACpB,kBAAkB;UAEtB;QACF,CAAC,CAAC;QACFb,wBAAwB,CAACQ,MAAM,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,SAAS;QACRZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBACEP,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBxB,OAAA;MAAAoB,QAAA,gBACApB,OAAA;QAAAoB,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnCrB,qBAAqB,gBACpBH,OAAA;QAAAoB,QAAA,EACGjB,qBAAqB,CAACsB,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC3C3B,OAAA;UAAAoB,QAAA,GAAgB,oBAAkB,EAACM,UAAU;QAAA,GAApCC,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoC,CACnD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,gBAELxB,OAAA;QAAAoB,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC5B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhDWD,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}