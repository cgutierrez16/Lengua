{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst Buffer_js_1 = require(\"../../../utils/Buffer.js\");\nconst DefaultMap_js_1 = require(\"../../../utils/DefaultMap.js\");\nconst EventEmitter_js_1 = require(\"../../../utils/EventEmitter.js\");\nconst IdWrapper_js_1 = require(\"../../../utils/IdWrapper.js\");\nconst OutgoingMessage_js_1 = require(\"../../OutgoingMessage.js\");\nconst events_js_1 = require(\"./events.js\");\nconst SubscriptionManager_js_1 = require(\"./SubscriptionManager.js\");\nclass EventWrapper {\n  #idWrapper = new IdWrapper_js_1.IdWrapper();\n  #contextId;\n  #event;\n  constructor(event, contextId) {\n    this.#event = event;\n    this.#contextId = contextId;\n  }\n  get id() {\n    return this.#idWrapper.id;\n  }\n  get contextId() {\n    return this.#contextId;\n  }\n  get event() {\n    return this.#event;\n  }\n}\n/**\n * Maps event name to a desired buffer length.\n */\nconst eventBufferLength = new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);\nclass EventManager extends EventEmitter_js_1.EventEmitter {\n  /**\n   * Maps event name to a set of contexts where this event already happened.\n   * Needed for getting buffered events from all the contexts in case of\n   * subscripting to all contexts.\n   */\n  #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => new Set());\n  /**\n   * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events\n   * during subscription. Channel-agnostic.\n   */\n  #eventBuffers = new Map();\n  /**\n   * Maps `eventName` + `browsingContext` + `channel` to last sent event id.\n   * Used to avoid sending duplicated events when user\n   * subscribes -> unsubscribes -> subscribes.\n   */\n  #lastMessageSent = new Map();\n  #subscriptionManager;\n  #browsingContextStorage;\n  constructor(browsingContextStorage) {\n    super();\n    this.#browsingContextStorage = browsingContextStorage;\n    this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(browsingContextStorage);\n  }\n  get subscriptionManager() {\n    return this.#subscriptionManager;\n  }\n  /**\n   * Returns consistent key to be used to access value maps.\n   */\n  static #getMapKey(eventName, browsingContext, channel) {\n    return JSON.stringify({\n      eventName,\n      browsingContext,\n      channel\n    });\n  }\n  registerEvent(event, contextId) {\n    this.registerPromiseEvent(Promise.resolve({\n      kind: 'success',\n      value: event\n    }), contextId, event.method);\n  }\n  registerPromiseEvent(event, contextId, eventName) {\n    const eventWrapper = new EventWrapper(event, contextId);\n    const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);\n    this.#bufferEvent(eventWrapper, eventName);\n    // Send events to channels in the subscription priority.\n    for (const channel of sortedChannels) {\n      this.emit(\"event\" /* EventManagerEvents.Event */, {\n        message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),\n        event: eventName\n      });\n      this.#markEventSent(eventWrapper, channel, eventName);\n    }\n  }\n  async subscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    // First check if all the contexts are known.\n    for (const contextId of contextIds) {\n      if (contextId !== null) {\n        // Assert the context is known. Throw exception otherwise.\n        this.#browsingContextStorage.getContext(contextId);\n      }\n    }\n    for (const eventName of eventNames) {\n      for (const contextId of contextIds) {\n        this.#subscriptionManager.subscribe(eventName, contextId, channel);\n        for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {\n          // The order of the events is important.\n          this.emit(\"event\" /* EventManagerEvents.Event */, {\n            message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel),\n            event: eventName\n          });\n          this.#markEventSent(eventWrapper, channel, eventName);\n        }\n      }\n    }\n    await this.toggleModulesIfNeeded();\n  }\n  async unsubscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    this.#subscriptionManager.unsubscribeAll(eventNames, contextIds, channel);\n    await this.toggleModulesIfNeeded();\n  }\n  async toggleModulesIfNeeded() {\n    // TODO(1): Only update changed subscribers\n    // TODO(2): Enable for Worker Targets\n    await Promise.all(this.#browsingContextStorage.getAllContexts().map(async context => {\n      return await context.toggleModulesIfNeeded();\n    }));\n  }\n  /**\n   * If the event is buffer-able, put it in the buffer.\n   */\n  #bufferEvent(eventWrapper, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const bufferMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId);\n    if (!this.#eventBuffers.has(bufferMapKey)) {\n      this.#eventBuffers.set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));\n    }\n    this.#eventBuffers.get(bufferMapKey).add(eventWrapper);\n    // Add the context to the list of contexts having `eventName` events.\n    this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);\n  }\n  /**\n   * If the event is buffer-able, mark it as sent to the given contextId and channel.\n   */\n  #markEventSent(eventWrapper, channel, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const lastSentMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId, channel);\n    this.#lastMessageSent.set(lastSentMapKey, Math.max(this.#lastMessageSent.get(lastSentMapKey) ?? 0, eventWrapper.id));\n  }\n  /**\n   * Returns events which are buffered and not yet sent to the given channel events.\n   */\n  #getBufferedEvents(eventName, contextId, channel) {\n    const bufferMapKey = EventManager.#getMapKey(eventName, contextId);\n    const lastSentMapKey = EventManager.#getMapKey(eventName, contextId, channel);\n    const lastSentMessageId = this.#lastMessageSent.get(lastSentMapKey) ?? -Infinity;\n    const result = this.#eventBuffers.get(bufferMapKey)?.get().filter(wrapper => wrapper.id > lastSentMessageId) ?? [];\n    if (contextId === null) {\n      // For global subscriptions, events buffered in each context should be sent back.\n      Array.from(this.#eventToContextsMap.get(eventName).keys()).filter(_contextId =>\n      // Events without context are already in the result.\n      _contextId !== null &&\n      // Events from deleted contexts should not be sent.\n      this.#browsingContextStorage.hasContext(_contextId)).map(_contextId => this.#getBufferedEvents(eventName, _contextId, channel)).forEach(events => result.push(...events));\n    }\n    return result.sort((e1, e2) => e1.id - e2.id);\n  }\n}\nexports.EventManager = EventManager;","map":{"version":3,"names":["protocol_js_1","require","Buffer_js_1","DefaultMap_js_1","EventEmitter_js_1","IdWrapper_js_1","OutgoingMessage_js_1","events_js_1","SubscriptionManager_js_1","EventWrapper","idWrapper","IdWrapper","contextId","event","constructor","id","eventBufferLength","Map","ChromiumBidi","Log","EventNames","LogEntryAdded","EventManager","EventEmitter","eventToContextsMap","DefaultMap","Set","eventBuffers","lastMessageSent","subscriptionManager","browsingContextStorage","SubscriptionManager","getMapKey","#getMapKey","eventName","browsingContext","channel","JSON","stringify","registerEvent","registerPromiseEvent","Promise","resolve","kind","value","method","eventWrapper","sortedChannels","getChannelsSubscribedToEvent","bufferEvent","emit","message","OutgoingMessage","createFromPromise","markEventSent","subscribe","eventNames","contextIds","name","assertSupportedEvent","getContext","getBufferedEvents","toggleModulesIfNeeded","unsubscribe","unsubscribeAll","all","getAllContexts","map","context","#bufferEvent","has","bufferMapKey","set","Buffer","get","add","#markEventSent","lastSentMapKey","Math","max","#getBufferedEvents","lastSentMessageId","Infinity","result","filter","wrapper","Array","from","keys","_contextId","hasContext","forEach","events","push","sort","e1","e2","exports"],"sources":["../../../../../src/bidiMapper/modules/session/EventManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}