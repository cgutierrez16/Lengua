{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/misc/hugging.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Hugging = async () => {\n  _s();\n  const [sentenceSimilarityRes, setSentenceSimilarityRes] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle loading state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const hf = new HfInference(process.env.REACT_APP_HUGGING_FACE_TOKEN || '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');\n      try {\n        let result = await hf.sentenceSimilarity({\n          model: \"sentence-transformers/paraphrase-xlm-r-multilingual-v1\",\n          inputs: {\n            source_sentence: \"That is a happy person\",\n            sentences: [\"That is a happy dog\", \"That is a very happy person\", \"Today is a sunny day\"]\n          }\n        });\n        setSentenceSimilarityRes(result); // Set the result when fetched\n      } catch (error) {\n        console.error(\"Error fetching sentence similarity:\", error);\n      } finally {\n        setLoading(false); // Stop loading once the result is fetched\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"balls lol hug\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Hugging, \"Fo8B0BeB5QcuCnNzuYyvRJVZCtg=\");\n_c = Hugging;\nvar _c;\n$RefreshReg$(_c, \"Hugging\");","map":{"version":3,"names":["React","useEffect","useState","HfInference","jsxDEV","_jsxDEV","Hugging","_s","sentenceSimilarityRes","setSentenceSimilarityRes","loading","setLoading","fetchData","hf","process","env","REACT_APP_HUGGING_FACE_TOKEN","result","sentenceSimilarity","model","inputs","source_sentence","sentences","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/misc/hugging.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { HfInference } from \"@huggingface/inference\";\n\nexport const Hugging = async () => {\n  const [sentenceSimilarityRes, setSentenceSimilarityRes] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle loading state\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const hf = new HfInference(process.env.REACT_APP_HUGGING_FACE_TOKEN || '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');\n      \n      try {\n        let result = await hf.sentenceSimilarity({\n          model: \"sentence-transformers/paraphrase-xlm-r-multilingual-v1\",\n          inputs: {\n            source_sentence: \"That is a happy person\",\n            sentences: [\n              \"That is a happy dog\",\n              \"That is a very happy person\",\n              \"Today is a sunny day\",\n            ],\n          },\n        });\n        setSentenceSimilarityRes(result); // Set the result when fetched\n      } catch (error) {\n        console.error(\"Error fetching sentence similarity:\", error);\n      } finally {\n        setLoading(false); // Stop loading once the result is fetched\n      }\n    };\n\n    fetchData();\n  }, []);\n  return (\n    <div>\n      <h2>balls lol hug</h2>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EACjC,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxE,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,EAAE,GAAG,IAAIV,WAAW,CAACW,OAAO,CAACC,GAAG,CAACC,4BAA4B,IAAI,uCAAuC,CAAC;MAE/G,IAAI;QACF,IAAIC,MAAM,GAAG,MAAMJ,EAAE,CAACK,kBAAkB,CAAC;UACvCC,KAAK,EAAE,wDAAwD;UAC/DC,MAAM,EAAE;YACNC,eAAe,EAAE,wBAAwB;YACzCC,SAAS,EAAE,CACT,qBAAqB,EACrB,6BAA6B,EAC7B,sBAAsB;UAE1B;QACF,CAAC,CAAC;QACFb,wBAAwB,CAACQ,MAAM,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,SAAS;QACRZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBACEP,OAAA;IAAAoB,QAAA,eACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCWD,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}