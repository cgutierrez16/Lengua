{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirefoxTargetManager = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst EventEmitter_js_1 = require(\"../common/EventEmitter.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst Deferred_js_1 = require(\"../util/Deferred.js\");\n/**\n * FirefoxTargetManager implements target management using\n * `Target.setDiscoverTargets` without using auto-attach. It, therefore, creates\n * targets that lazily establish their CDP sessions.\n *\n * Although the approach is potentially flaky, there is no other way for Firefox\n * because Firefox's CDP implementation does not support auto-attach.\n *\n * Firefox does not support targetInfoChanged and detachedFromTarget events:\n *\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1610855\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1636979\n *   @internal\n */\nclass FirefoxTargetManager extends EventEmitter_js_1.EventEmitter {\n  #connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map();\n  /**\n   * Keeps track of targets that were created via 'Target.targetCreated'\n   * and which one are not filtered out by `targetFilterCallback`.\n   *\n   * The target is removed from here once it's been destroyed.\n   */\n  #availableTargetsByTargetId = new Map();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #availableTargetsBySessionId = new Map();\n  #targetFilterCallback;\n  #targetFactory;\n  #attachedToTargetListenersBySession = new WeakMap();\n  #initializeDeferred = Deferred_js_1.Deferred.create();\n  #targetsIdsForInit = new Set();\n  constructor(connection, targetFactory, targetFilterCallback) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on(CDPSession_js_1.CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.setupAttachmentListeners(this.#connection);\n  }\n  setupAttachmentListeners(session) {\n    const listener = event => {\n      return this.#onAttachedToTarget(session, event);\n    };\n    (0, assert_js_1.assert)(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n  }\n  #onSessionDetached = session => {\n    this.removeSessionListeners(session);\n    this.#availableTargetsBySessionId.delete(session.id());\n  };\n  removeSessionListeners(session) {\n    if (this.#attachedToTargetListenersBySession.has(session)) {\n      session.off('Target.attachedToTarget', this.#attachedToTargetListenersBySession.get(session));\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n  }\n  getAvailableTargets() {\n    return this.#availableTargetsByTargetId;\n  }\n  dispose() {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n  }\n  async initialize() {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{}]\n    });\n    this.#targetsIdsForInit = new Set(this.#discoveredTargetsByTargetId.keys());\n    await this.#initializeDeferred.valueOrThrow();\n  }\n  #onTargetCreated = async event => {\n    if (this.#discoveredTargetsByTargetId.has(event.targetInfo.targetId)) {\n      return;\n    }\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n      this.#finishInitializationIfReady(target._targetId);\n      return;\n    }\n    const target = this.#targetFactory(event.targetInfo, undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#finishInitializationIfReady(event.targetInfo.targetId);\n      return;\n    }\n    target._initialize();\n    this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n    this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n    this.#finishInitializationIfReady(target._targetId);\n  };\n  #onTargetDestroyed = event => {\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    const target = this.#availableTargetsByTargetId.get(event.targetId);\n    if (target) {\n      this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n      this.#availableTargetsByTargetId.delete(event.targetId);\n    }\n  };\n  #onAttachedToTarget = async (parentSession, event) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n    const target = this.#availableTargetsByTargetId.get(targetInfo.targetId);\n    (0, assert_js_1.assert)(target, `Target ${targetInfo.targetId} is missing`);\n    session._setTarget(target);\n    this.setupAttachmentListeners(session);\n    this.#availableTargetsBySessionId.set(session.id(), this.#availableTargetsByTargetId.get(targetInfo.targetId));\n    parentSession.emit(CDPSession_js_1.CDPSessionEvent.Ready, session);\n  };\n  #finishInitializationIfReady(targetId) {\n    this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n}\nexports.FirefoxTargetManager = FirefoxTargetManager;","map":{"version":3,"names":["CDPSession_js_1","require","EventEmitter_js_1","assert_js_1","Deferred_js_1","FirefoxTargetManager","EventEmitter","connection","discoveredTargetsByTargetId","Map","availableTargetsByTargetId","availableTargetsBySessionId","targetFilterCallback","targetFactory","attachedToTargetListenersBySession","WeakMap","initializeDeferred","Deferred","create","targetsIdsForInit","Set","constructor","on","onTargetCreated","onTargetDestroyed","CDPSessionEvent","SessionDetached","onSessionDetached","setupAttachmentListeners","session","listener","event","onAttachedToTarget","assert","has","set","removeSessionListeners","delete","id","off","get","getAvailableTargets","dispose","initialize","send","discover","filter","keys","valueOrThrow","targetInfo","targetId","type","attached","target","undefined","_initialize","finishInitializationIfReady","_targetId","emit","#onAttachedToTarget","parentSession","sessionId","Error","_setTarget","Ready","#finishInitializationIfReady","size","resolve","exports"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/node_modules/puppeteer-core/src/cdp/FirefoxTargetManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {TargetFilterCallback} from '../api/Browser.js';\nimport {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport type {CdpCDPSession} from './CDPSession.js';\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\nimport {\n  type TargetFactory,\n  TargetManagerEvent,\n  type TargetManager,\n  type TargetManagerEvents,\n} from './TargetManager.js';\n\n/**\n * FirefoxTargetManager implements target management using\n * `Target.setDiscoverTargets` without using auto-attach. It, therefore, creates\n * targets that lazily establish their CDP sessions.\n *\n * Although the approach is potentially flaky, there is no other way for Firefox\n * because Firefox's CDP implementation does not support auto-attach.\n *\n * Firefox does not support targetInfoChanged and detachedFromTarget events:\n *\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1610855\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1636979\n *   @internal\n */\nexport class FirefoxTargetManager\n  extends EventEmitter<TargetManagerEvents>\n  implements TargetManager\n{\n  #connection: Connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map<string, Protocol.Target.TargetInfo>();\n  /**\n   * Keeps track of targets that were created via 'Target.targetCreated'\n   * and which one are not filtered out by `targetFilterCallback`.\n   *\n   * The target is removed from here once it's been destroyed.\n   */\n  #availableTargetsByTargetId = new Map<string, CdpTarget>();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #availableTargetsBySessionId = new Map<string, CdpTarget>();\n  #targetFilterCallback: TargetFilterCallback | undefined;\n  #targetFactory: TargetFactory;\n\n  #attachedToTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.AttachedToTargetEvent) => Promise<void>\n  >();\n\n  #initializeDeferred = Deferred.create<void>();\n  #targetsIdsForInit = new Set<string>();\n\n  constructor(\n    connection: Connection,\n    targetFactory: TargetFactory,\n    targetFilterCallback?: TargetFilterCallback\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n    this.setupAttachmentListeners(this.#connection);\n  }\n\n  setupAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = (event: Protocol.Target.AttachedToTargetEvent) => {\n      return this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n  }\n\n  #onSessionDetached = (session: CDPSession) => {\n    this.removeSessionListeners(session);\n    this.#availableTargetsBySessionId.delete(session.id());\n  };\n\n  removeSessionListeners(session: CDPSession): void {\n    if (this.#attachedToTargetListenersBySession.has(session)) {\n      session.off(\n        'Target.attachedToTarget',\n        this.#attachedToTargetListenersBySession.get(session)!\n      );\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n  }\n\n  getAvailableTargets(): ReadonlyMap<string, CdpTarget> {\n    return this.#availableTargetsByTargetId;\n  }\n\n  dispose(): void {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n  }\n\n  async initialize(): Promise<void> {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{}],\n    });\n    this.#targetsIdsForInit = new Set(this.#discoveredTargetsByTargetId.keys());\n    await this.#initializeDeferred.valueOrThrow();\n  }\n\n  #onTargetCreated = async (\n    event: Protocol.Target.TargetCreatedEvent\n  ): Promise<void> => {\n    if (this.#discoveredTargetsByTargetId.has(event.targetInfo.targetId)) {\n      return;\n    }\n\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n      this.#finishInitializationIfReady(target._targetId);\n      return;\n    }\n\n    const target = this.#targetFactory(event.targetInfo, undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#finishInitializationIfReady(event.targetInfo.targetId);\n      return;\n    }\n    target._initialize();\n    this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n    this.emit(TargetManagerEvent.TargetAvailable, target);\n    this.#finishInitializationIfReady(target._targetId);\n  };\n\n  #onTargetDestroyed = (event: Protocol.Target.TargetDestroyedEvent): void => {\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    const target = this.#availableTargetsByTargetId.get(event.targetId);\n    if (target) {\n      this.emit(TargetManagerEvent.TargetGone, target);\n      this.#availableTargetsByTargetId.delete(event.targetId);\n    }\n  };\n\n  #onAttachedToTarget = async (\n    parentSession: Connection | CDPSession,\n    event: Protocol.Target.AttachedToTargetEvent\n  ) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n\n    const target = this.#availableTargetsByTargetId.get(targetInfo.targetId);\n\n    assert(target, `Target ${targetInfo.targetId} is missing`);\n\n    (session as CdpCDPSession)._setTarget(target);\n    this.setupAttachmentListeners(session);\n\n    this.#availableTargetsBySessionId.set(\n      session.id(),\n      this.#availableTargetsByTargetId.get(targetInfo.targetId)!\n    );\n\n    parentSession.emit(CDPSessionEvent.Ready, session);\n  };\n\n  #finishInitializationIfReady(targetId: string): void {\n    this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}