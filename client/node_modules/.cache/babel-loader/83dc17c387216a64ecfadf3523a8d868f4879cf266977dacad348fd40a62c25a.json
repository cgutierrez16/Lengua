{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearCustomQueryHandlers = exports.customQueryHandlerNames = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = exports.customQueryHandlers = exports.CustomQueryHandlerRegistry = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\nconst Function_js_1 = require(\"../util/Function.js\");\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\nconst ScriptInjector_js_1 = require(\"./ScriptInjector.js\");\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nclass CustomQueryHandlerRegistry {\n  #handlers = new Map();\n  get(name) {\n    const handler = this.#handlers.get(name);\n    return handler ? handler[1] : undefined;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   */\n  register(name, handler) {\n    (0, assert_js_1.assert)(!this.#handlers.has(name), `Cannot register over existing handler: ${name}`);\n    (0, assert_js_1.assert)(/^[a-zA-Z]+$/.test(name), `Custom query handler names may only contain [a-zA-Z]`);\n    (0, assert_js_1.assert)(handler.queryAll || handler.queryOne, `At least one query method must be implemented.`);\n    const Handler = class extends QueryHandler_js_1.QueryHandler {\n      static querySelectorAll = (0, Function_js_1.interpolateFunction)((node, selector, PuppeteerUtil) => {\n        return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelectorAll(node, selector);\n      }, {\n        name: JSON.stringify(name)\n      });\n      static querySelector = (0, Function_js_1.interpolateFunction)((node, selector, PuppeteerUtil) => {\n        return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelector(node, selector);\n      }, {\n        name: JSON.stringify(name)\n      });\n    };\n    const registerScript = (0, Function_js_1.interpolateFunction)(PuppeteerUtil => {\n      PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n        queryAll: PLACEHOLDER('queryAll'),\n        queryOne: PLACEHOLDER('queryOne')\n      });\n    }, {\n      name: JSON.stringify(name),\n      queryAll: handler.queryAll ? (0, Function_js_1.stringifyFunction)(handler.queryAll) : String(undefined),\n      queryOne: handler.queryOne ? (0, Function_js_1.stringifyFunction)(handler.queryOne) : String(undefined)\n    }).toString();\n    this.#handlers.set(name, [registerScript, Handler]);\n    ScriptInjector_js_1.scriptInjector.append(registerScript);\n  }\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   */\n  unregister(name) {\n    const handler = this.#handlers.get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    ScriptInjector_js_1.scriptInjector.pop(handler[0]);\n    this.#handlers.delete(name);\n  }\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   */\n  names() {\n    return [...this.#handlers.keys()];\n  }\n  /**\n   * Unregisters all custom query handlers.\n   */\n  clear() {\n    for (const [registerScript] of this.#handlers) {\n      ScriptInjector_js_1.scriptInjector.pop(registerScript);\n    }\n    this.#handlers.clear();\n  }\n}\nexports.CustomQueryHandlerRegistry = CustomQueryHandlerRegistry;\n/**\n * @internal\n */\nexports.customQueryHandlers = new CustomQueryHandlerRegistry();\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nfunction registerCustomQueryHandler(name, handler) {\n  exports.customQueryHandlers.register(name, handler);\n}\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nfunction unregisterCustomQueryHandler(name) {\n  exports.customQueryHandlers.unregister(name);\n}\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nfunction customQueryHandlerNames() {\n  return exports.customQueryHandlers.names();\n}\nexports.customQueryHandlerNames = customQueryHandlerNames;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nfunction clearCustomQueryHandlers() {\n  exports.customQueryHandlers.clear();\n}\nexports.clearCustomQueryHandlers = clearCustomQueryHandlers;","map":{"version":3,"names":["assert_js_1","require","Function_js_1","QueryHandler_js_1","ScriptInjector_js_1","CustomQueryHandlerRegistry","handlers","Map","get","name","handler","undefined","register","assert","has","test","queryAll","queryOne","Handler","QueryHandler","querySelectorAll","interpolateFunction","node","selector","PuppeteerUtil","customQuerySelectors","PLACEHOLDER","JSON","stringify","querySelector","registerScript","stringifyFunction","String","toString","set","scriptInjector","append","unregister","Error","pop","delete","names","keys","clear","exports","customQueryHandlers","registerCustomQueryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/node_modules/puppeteer-core/src/common/CustomQueryHandler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type PuppeteerUtil from '../injected/injected.js';\nimport {assert} from '../util/assert.js';\nimport {interpolateFunction, stringifyFunction} from '../util/Function.js';\n\nimport {\n  QueryHandler,\n  type QuerySelector,\n  type QuerySelectorAll,\n} from './QueryHandler.js';\nimport {scriptInjector} from './ScriptInjector.js';\n\n/**\n * @public\n */\nexport interface CustomQueryHandler {\n  /**\n   * Searches for a {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Node} matching the given `selector` from {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | node}.\n   */\n  queryOne?: (node: Node, selector: string) => Node | null;\n  /**\n   * Searches for some {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Nodes} matching the given `selector` from {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | node}.\n   */\n  queryAll?: (node: Node, selector: string) => Iterable<Node>;\n}\n\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nexport class CustomQueryHandlerRegistry {\n  #handlers = new Map<\n    string,\n    [registerScript: string, Handler: typeof QueryHandler]\n  >();\n\n  get(name: string): typeof QueryHandler | undefined {\n    const handler = this.#handlers.get(name);\n    return handler ? handler[1] : undefined;\n  }\n\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   */\n  register(name: string, handler: CustomQueryHandler): void {\n    assert(\n      !this.#handlers.has(name),\n      `Cannot register over existing handler: ${name}`\n    );\n    assert(\n      /^[a-zA-Z]+$/.test(name),\n      `Custom query handler names may only contain [a-zA-Z]`\n    );\n    assert(\n      handler.queryAll || handler.queryOne,\n      `At least one query method must be implemented.`\n    );\n\n    const Handler = class extends QueryHandler {\n      static override querySelectorAll: QuerySelectorAll = interpolateFunction(\n        (node, selector, PuppeteerUtil) => {\n          return PuppeteerUtil.customQuerySelectors\n            .get(PLACEHOLDER('name'))!\n            .querySelectorAll(node, selector);\n        },\n        {name: JSON.stringify(name)}\n      );\n      static override querySelector: QuerySelector = interpolateFunction(\n        (node, selector, PuppeteerUtil) => {\n          return PuppeteerUtil.customQuerySelectors\n            .get(PLACEHOLDER('name'))!\n            .querySelector(node, selector);\n        },\n        {name: JSON.stringify(name)}\n      );\n    };\n    const registerScript = interpolateFunction(\n      (PuppeteerUtil: PuppeteerUtil) => {\n        PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n          queryAll: PLACEHOLDER('queryAll'),\n          queryOne: PLACEHOLDER('queryOne'),\n        });\n      },\n      {\n        name: JSON.stringify(name),\n        queryAll: handler.queryAll\n          ? stringifyFunction(handler.queryAll)\n          : String(undefined),\n        queryOne: handler.queryOne\n          ? stringifyFunction(handler.queryOne)\n          : String(undefined),\n      }\n    ).toString();\n\n    this.#handlers.set(name, [registerScript, Handler]);\n    scriptInjector.append(registerScript);\n  }\n\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   */\n  unregister(name: string): void {\n    const handler = this.#handlers.get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    scriptInjector.pop(handler[0]);\n    this.#handlers.delete(name);\n  }\n\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   */\n  names(): string[] {\n    return [...this.#handlers.keys()];\n  }\n\n  /**\n   * Unregisters all custom query handlers.\n   */\n  clear(): void {\n    for (const [registerScript] of this.#handlers) {\n      scriptInjector.pop(registerScript);\n    }\n    this.#handlers.clear();\n  }\n}\n\n/**\n * @internal\n */\nexport const customQueryHandlers = new CustomQueryHandlerRegistry();\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nexport function registerCustomQueryHandler(\n  name: string,\n  handler: CustomQueryHandler\n): void {\n  customQueryHandlers.register(name, handler);\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nexport function unregisterCustomQueryHandler(name: string): void {\n  customQueryHandlers.unregister(name);\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nexport function customQueryHandlerNames(): string[] {\n  return customQueryHandlers.names();\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nexport function clearCustomQueryHandlers(): void {\n  customQueryHandlers.clear();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}