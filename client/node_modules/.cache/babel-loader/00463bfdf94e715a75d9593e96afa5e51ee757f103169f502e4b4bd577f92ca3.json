{"ast":null,"code":"var _jsxFileName = \"/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LyricTypingInput = ({\n  lines\n}) => {\n  _s();\n  const tempArray = [\"You have no idea\", \"How I've been spending my time\", \"How difficult it is to speak without convincing\", \"How much can you love a woman\", \"You have no idea\", \"How are my early mornings\"];\n  if (!lines || !lines.length) {\n    lines = tempArray;\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(lines.map(line => line.split(\" \").map(() => \"\")));\n  const inputRefs = useRef([]);\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const {\n      value\n    } = e.target;\n    const newInputs = inputs.map((line, li) => line.map((word, wi) => {\n      if (li === lineIndex && wi === wordIndex) {\n        return value;\n      }\n      return word;\n    }));\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      var _inputRefs$current$li;\n      const nextInput = (_inputRefs$current$li = inputRefs.current[lineIndex]) === null || _inputRefs$current$li === void 0 ? void 0 : _inputRefs$current$li[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lines.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      className: \"test lyrics-align\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        style: {\n          width: `${line.length}rem`,\n          // Increase the multiplier for the width calculation\n          margin: \"0 5px\",\n          textAlign: \"left\",\n          // Align text to the left\n          border: \"none\",\n          borderBottom: \"2px solid #000\",\n          // Add bottom border to simulate underline\n          outline: \"none\",\n          // Remove outline on focus\n          backgroundColor: \"transparent\",\n          // Transparent background\n          padding: \"2px 0\",\n          // Adjust padding for better alignment\n          paddingRight: \"5px\" // Extra padding to the right for better readability\n        },\n        maxLength: line.length\n      }, lineIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, lineIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(LyricTypingInput, \"BUcJtFmPhdZ2QFKbBm8dHv1SENo=\");\n_c = LyricTypingInput;\nvar _c;\n$RefreshReg$(_c, \"LyricTypingInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","LyricTypingInput","lines","_s","tempArray","length","inputs","setInputs","map","line","split","inputRefs","handleChange","e","lineIndex","wordIndex","value","target","newInputs","li","word","wi","maxLength","_inputRefs$current$li","nextInput","current","focus","children","style","marginBottom","className","type","width","margin","textAlign","border","borderBottom","outline","backgroundColor","padding","paddingRight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carlosgutierrez/Documents/React/spanish/client/src/components/lyricTypingInput.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nexport const LyricTypingInput = ({ lines} ) => {\n  const tempArray = [\n    \"You have no idea\",\n    \"How I've been spending my time\",\n    \"How difficult it is to speak without convincing\",\n    \"How much can you love a woman\",\n    \"You have no idea\",\n    \"How are my early mornings\",\n  ];\n\n  if (!lines || !lines.length) {\n    lines = tempArray\n  }\n\n  // Initialize state to store user inputs\n  const [inputs, setInputs] = useState(\n    lines.map((line) => line.split(\" \").map(() => \"\"))\n  );\n\n  const inputRefs = useRef([]);\n\n  const handleChange = (e, lineIndex, wordIndex) => {\n    const { value } = e.target;\n    const newInputs = inputs.map((line, li) =>\n      line.map((word, wi) => {\n        if (li === lineIndex && wi === wordIndex) {\n          return value;\n        }\n        return word;\n      })\n    );\n    setInputs(newInputs);\n\n    // Move to next input if current input is full\n    if (value.length >= e.target.maxLength) {\n      const nextInput = inputRefs.current[lineIndex]?.[wordIndex + 1];\n      if (nextInput) {\n        nextInput.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Initialize inputRefs.current as a 2D array\n    inputRefs.current = lines.map(() => []);\n  }, [lines]);\n\n  return (\n    <div>\n      {lines.map((line, lineIndex) => (\n        <div key={lineIndex} style={{ marginBottom: \"20px\" }} className=\"test lyrics-align\">\n          <input\n            type=\"text\"\n            key={lineIndex}\n            style={{\n              width: `${line.length}rem`, // Increase the multiplier for the width calculation\n              margin: \"0 5px\",\n              textAlign: \"left\", // Align text to the left\n              border: \"none\",\n              borderBottom: \"2px solid #000\", // Add bottom border to simulate underline\n              outline: \"none\", // Remove outline on focus\n              backgroundColor: \"transparent\", // Transparent background\n              padding: \"2px 0\", // Adjust padding for better alignment\n              paddingRight: \"5px\", // Extra padding to the right for better readability\n            }}\n            maxLength={line.length}          \n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAM;EAAAC,EAAA;EAC7C,MAAMC,SAAS,GAAG,CAChB,kBAAkB,EAClB,gCAAgC,EAChC,iDAAiD,EACjD,+BAA+B,EAC/B,kBAAkB,EAClB,2BAA2B,CAC5B;EAED,IAAI,CAACF,KAAK,IAAI,CAACA,KAAK,CAACG,MAAM,EAAE;IAC3BH,KAAK,GAAGE,SAAS;EACnB;;EAEA;EACA,MAAM,CAACE,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAClCM,KAAK,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACF,GAAG,CAAC,MAAM,EAAE,CAAC,CACnD,CAAC;EAED,MAAMG,SAAS,GAAGb,MAAM,CAAC,EAAE,CAAC;EAE5B,MAAMc,YAAY,GAAGA,CAACC,CAAC,EAAEC,SAAS,EAAEC,SAAS,KAAK;IAChD,MAAM;MAAEC;IAAM,CAAC,GAAGH,CAAC,CAACI,MAAM;IAC1B,MAAMC,SAAS,GAAGZ,MAAM,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEU,EAAE,KACpCV,IAAI,CAACD,GAAG,CAAC,CAACY,IAAI,EAAEC,EAAE,KAAK;MACrB,IAAIF,EAAE,KAAKL,SAAS,IAAIO,EAAE,KAAKN,SAAS,EAAE;QACxC,OAAOC,KAAK;MACd;MACA,OAAOI,IAAI;IACb,CAAC,CACH,CAAC;IACDb,SAAS,CAACW,SAAS,CAAC;;IAEpB;IACA,IAAIF,KAAK,CAACX,MAAM,IAAIQ,CAAC,CAACI,MAAM,CAACK,SAAS,EAAE;MAAA,IAAAC,qBAAA;MACtC,MAAMC,SAAS,IAAAD,qBAAA,GAAGZ,SAAS,CAACc,OAAO,CAACX,SAAS,CAAC,cAAAS,qBAAA,uBAA5BA,qBAAA,CAA+BR,SAAS,GAAG,CAAC,CAAC;MAC/D,IAAIS,SAAS,EAAE;QACbA,SAAS,CAACE,KAAK,CAAC,CAAC;MACnB;IACF;EACF,CAAC;EAED7B,SAAS,CAAC,MAAM;IACd;IACAc,SAAS,CAACc,OAAO,GAAGvB,KAAK,CAACM,GAAG,CAAC,MAAM,EAAE,CAAC;EACzC,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX,oBACEF,OAAA;IAAA2B,QAAA,EACGzB,KAAK,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEK,SAAS,kBACzBd,OAAA;MAAqB4B,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAACC,SAAS,EAAC,mBAAmB;MAAAH,QAAA,eACjF3B,OAAA;QACE+B,IAAI,EAAC,MAAM;QAEXH,KAAK,EAAE;UACLI,KAAK,EAAG,GAAEvB,IAAI,CAACJ,MAAO,KAAI;UAAE;UAC5B4B,MAAM,EAAE,OAAO;UACfC,SAAS,EAAE,MAAM;UAAE;UACnBC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,gBAAgB;UAAE;UAChCC,OAAO,EAAE,MAAM;UAAE;UACjBC,eAAe,EAAE,aAAa;UAAE;UAChCC,OAAO,EAAE,OAAO;UAAE;UAClBC,YAAY,EAAE,KAAK,CAAE;QACvB,CAAE;QACFlB,SAAS,EAAEb,IAAI,CAACJ;MAAO,GAZlBS,SAAS;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAaf;IAAC,GAhBM9B,SAAS;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAiBd,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzC,EAAA,CAvEWF,gBAAgB;AAAA4C,EAAA,GAAhB5C,gBAAgB;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}